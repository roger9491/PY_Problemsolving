'''
題目:
    有一個陣列，由n個整數組成
    你最多只能移除一個數字，剩下的陣列長度 n or n-1，
    我們要求 最大連續遞增數列的長度，
    ex: [2,5,3,6,2,3,5] => [2,3,5] 長度為5 (未移除一個數字)

輸入格式:
    第一行 n 為陣列長度 (2?n?2*10**5)
    第二行 a 為 n 個整數，空格隔開
輸出格式:
    整數 ， 最大連續遞增長度

Example:
input:
5
1 2 5 3 4
output:
4

input:
2
1 2
output:
2

input:
7
6 5 4 3 2 4 3
output:
2

第一個範例 我們可以移除 第三個元素5，剩下 1 2 3 4 長度為4的連續遞增數列

解法:
    dp

詳解:
    我們有兩種情況 做選擇 
    1.沒有移除
    2.移除
    (1)換句話說 在沒有移除元素的情況下，我們要找出最大連續的長度
    (2)移除 的情形也是。

    (1)的情形很好解決 只要記錄每一個位置 的 連續長度就行了
    (2)代表 我們 要考慮是否要刪除數字
    刪除數字的情形只有可能是下面兩種
    ex 有三個數字 i-2 i-1 i
    第一種: i-1 >= i
      二種: i-1 <= i-2
    來選擇刪除 i-1。
    所以 (1) dp[i][0] 表示 當前 有多少個連續數字
         (2) dp[i][1] 表示 在當前的數字下 以及 之前有刪除過的 連續數字長度

    因為 每個位置都代表當前情形 所以我們需要 一個變數 來儲存 最大 值
    可以試著 畫表格 幫助了解

'''
n = int(input())
a = list(map(int,input().split()))


dp = [[0]*2 for i in range(n)]
dp[0][0] = 1    #初始
dp[0][1] = 1
ans = dp[0][0]  #儲存最大值
for i in range(1,n):    #遍歷
    if a[i] > a[i-1]:   #連續情形
        dp[i][0] = dp[i-1][0] + 1   
        dp[i][1] = dp[i-1][1] + 1
    else:               #中斷連續 就都會變成 1
        dp[i][0] = 1
        dp[i][1] = 1

    if i>=2 and a[i] > a[i-2] and (a[i-1] >= a[i] or a[i-2] >= a[i-1]):     #刪除情形
        dp[i][1] = dp[i-2][0] + 1

    ans = max(ans,dp[i][0],dp[i][1])

print(ans)