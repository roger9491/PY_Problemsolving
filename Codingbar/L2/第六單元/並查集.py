'''
並查集 是一種資料結構

解決元素分組問題

主要是兩種操作
(1)合併(Union): 把兩個不相交的集合合併為一個集合
(2)查詢(Find):  查詢兩個元素是否在同一個集合中





第七單元 課後作業
#QUESTION

在獨眼怪星球上有 N 隻不同類型的獨眼怪，

由於獨眼怪們之間不見得彼此認識，即便他們是鄰居，

因此身為獨眼怪星球球長的你，想要統計一下他們是否有各自的小圈子。



怎樣的情況會成為一個小圈子呢？

比方說獨眼怪一號和獨眼怪二號是好朋友，

而獨眼怪二號和獨眼怪三號是好朋友，

那麼我們就可以說獨眼怪一二三站著穿，

我是說，獨眼怪一號二號三號就會形成一個小圈子，

同理，如果獨眼怪二號還和獨眼怪四號也是好朋友，

那麼四號也會加入這個小圈子。



你請試著寫一個程式，

協助統計出所有的獨眼怪總共會形成幾個小圈子？



#INPUT

輸入共有一列，必為一個 N x N 的二維串列(矩陣)，

用來表示 N 隻獨眼怪之間的好朋友關係。



舉例：

假設輸入的是一個 5 x 5 的二維串列，

[[1,1,1,0,0],[1,1,0,0,1],[1,0,1,0,0],[0,0,0,1,0],[0,1,0,0,1]]



為了方便觀察，

我們可以將其排成矩陣形式：

1   1,1,1,0,0
2   1,1,0,0,1
3   1,0,1,0,0
4   0,0,0,1,0
5   0,1,0,0,1



第一列的串列用來表示獨眼怪一號與其他獨眼怪的關係，

1 表示是好朋友關係，0 表示非好朋友關係，

因此觀察 [1,1,1,0,0]，可知獨眼怪一號和一號二號三號為好朋友，

和四號五號並非好朋友，依此類推可得其他獨眼怪之間的關係。



上述矩陣最後可計算出共有 2 個小圈子，

因為 1號有好朋友 2,3，2號有好朋友5，

4號自己和自己一個人。



順帶一提，

自己一定和自己是好朋友，

以及如果 i 號與 j 號是好朋友，反過來說 j 號與 i 號也應為好朋友，

意即矩陣將是一個對稱矩陣。



#OUTPUT

輸出共有一列，必為一個正整數，

用來表示總共有幾個小圈子。


'''